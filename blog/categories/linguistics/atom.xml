<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linguistics | Wordsi by Fozzie The Beat]]></title>
  <link href="http://fozziethebeat.github.com/blog/categories/linguistics/atom.xml" rel="self"/>
  <link href="http://fozziethebeat.github.com/"/>
  <updated>2012-08-24T14:15:39+09:00</updated>
  <id>http://fozziethebeat.github.com/</id>
  <author>
    <name><![CDATA[Keith Stevens]]></name>
    <email><![CDATA[fozziethebeat@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puzzle Time: Transforming Names]]></title>
    <link href="http://fozziethebeat.github.com/blog/2012/04/23/puzzle-time-transforming-names/"/>
    <updated>2012-04-23T22:18:00+09:00</updated>
    <id>http://fozziethebeat.github.com/blog/2012/04/23/puzzle-time-transforming-names</id>
    <content type="html"><![CDATA[<p>This post starts what will hopefully be a new trend: computational solutions to
[NPR's Sunday Puzzle][1].  In this weeks puzzle, we have to</p>

<p><blockquote><p>Think of a common man's name in four letters, one syllable. Move each letter exactly halfway around the alphabet. For example, A would become N, N would become A, and B would become O. The result will be a common woman's name in two syllables. What names are these?</p></blockquote></p>

<p>Word puzzles can often be pretty hard for automated computer programs.  This is
in part what made [IBM's Watson][2] so darn cool.  But thankfully this week's
puzzle is amazingly simple for a program, in fact, i'd even say it's ideal for a
program.  To solve it, just need two simple steps:</p>

<ol>
<li>Gather a bunch of male and female names</li>
<li>Process the male names as noted to see if we have any matching female names</li>
</ol>


<p>Step 1 is perhaps the hardest since it requires gathering not only names, but
common names in english.  However, [this][3] handy site has done the work for
us.  Here they have listings of common English names based on a variety of
categories: region, ranking, gender, alphabetical, etc.  For our purposes, we'll
just grab the a long list of the most frequent male and female names from
[here][4] and [here][5].  All the names are nicely laid out in a table with a
pretty regular format.  In fact the format is so regular we can write a [<em>regular expression</em>][6] for it.  Here's an example of the table:</p>

<p>``` html</p>

<table align="left" CELLPADDING="3" CELLSPACING="3" style="table1">
<tr bgcolor="F5FDD9"><td><b>Name&nbsp;&nbsp;</td><td><b>% Frequency&nbsp;&nbsp;</td><td><b>Approx Number&nbsp;&nbsp;</td><td><b>Rank&nbsp;&nbsp;</td></tr>
<tr bgcolor="white"><td>AARON</td><td>0.24</td><td> 350,151 </td><td>77</td></tr>
<tr bgcolor="white"><td>ABDUL</td><td>0.007</td><td> 10,213 </td><td>831</td></tr>
<tr bgcolor="F5FDD9"><td>ABE</td><td>0.006</td><td> 8,754 </td><td>854</td></tr>
<tr bgcolor="white"><td>ABEL</td><td>0.019</td><td> 27,720 </td><td>485</td></tr>
<tr bgcolor="white"><td>ABRAHAM</td><td>0.035</td><td> 51,064 </td><td>347</td></tr>
<tr bgcolor="white"><td>ABRAM</td><td>0.005</td><td> 7,295 </td><td>1053</td></tr>
<tr bgcolor="F5FDD9"><td>ADALBERTO</td><td>0.005</td><td> 7,295 </td><td>1040</td></tr>
<tr bgcolor="white"><td>ADAM</td><td>0.259</td><td> 377,871 </td><td>69</td></tr>
```

Regular right?  It's so darn simple we can use some simple command line tools to
clean it up:

```
cat female_names_alpha.htm | grep '<tr bgcolor="' | sed "s/.*<td>\([A-Z]\+\).*/\1/" | tail -n +2 > female_names.txt
```

If we downloaded the female names into `female_names_alpha.htm`, the first part
will simply print out the contents of the html page to standard out.  The second
part, the grep command, will catch all rows in the table, which thankfully have
the same start prefix.  Part three extracts the names nestled in a row element.
And finally the tail part eliminates the first row of the table, e.g. the head
row, which grep accidentally catches.  This'll grab us a ton of names.

So what's next?  Well, we have a bunch of male and female names.  But we've got
too many, namely we have names that clearly won't work as they have too many or
too few letters.  So let's so some more cleaning, but this time in scala:

``` scala
val maleNames = Source.fromFile(args(0)).getLines.filter(_.size == 4)
```

This dandy line reads the text from the file and filters out any lines that have
more than four characters.  Since our initial processing placed each name on a
line, this in effect removes any names with more than four letters.  If we do
this with the female names, we'll have lists of common four letter names for the
two genders.  For later use, we'll also turn the female names into a set by
calling `.toSet` on the list.

Last, we can do the transformation on each male name to see if it's a valid
female name and then print out any combinations that match.  The next three
lines do this slickly:

``` scala
maleNames.map(w => (w, w.map(l => (((l-'A'+13) % 26) + 'A').toChar).toString))
         .filter( bg => femaleNames.contains(bg._2))
         .foreach(println)
```

This works in three steps.  First, the `map` call transforms each male name into
a `tuple` which consists of the original male name, and then a _potential_
female name by sliding up each letter in the name by 13 letters.  With ascii
characters, this is done just by first grounding the letter to 0, by subtracting
the char value for `A`, adding 13, and then rolling over the value to be back
in the range of the 26 letter characters by taking the modulo (`%`) and finally
bumping the character value into the range of real ascii characters by adding
`A`.   That's all done in the first line.  Step two is to simply throw out any
generated female names that don't show up in our list of female names, done by
line 3.  And the final line just prints out any matches we get.  With our name
lists, this turns out to be:

```
(ERIN,REVA)
(EVAN,RINA)
(GLEN,TYRA)
(IVAN,VINA)
(RYAN,ELNA)
```

The rules of the game stipulated that the male name had to have one syllable and
the female name has to have two.  We didn't code for this at all since that
parts slightly more complicated, and since our pre-processing reduced the set of
options down to five, we can easily pick out a valid answer.  In this case,
"Glen" and "Tyra" or "Ryan" and "Elna" look like valid responses.  I'd vote for
the first pair since I haven't heard "Elna" in forever.


  [1]: http://www.npr.org/2012/04/22/151120151/a-puzzle-worthy-of-don-draper
  [2]: http://www-03.ibm.com/innovation/us/watson/index.html
  [3]: http://names.mongabay.com
  [4]: http://names.mongabay.com/male_names.htm
  [5]: http://names.mongabay.com/female_names.htm
  [6]: http://en.wikipedia.org/wiki/Regular_expression

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Morphological Analysis made easy with Scala]]></title>
    <link href="http://fozziethebeat.github.com/blog/2012/02/29/morphological-analysis-made-easy-with-scala/"/>
    <updated>2012-02-29T19:49:00+09:00</updated>
    <id>http://fozziethebeat.github.com/blog/2012/02/29/morphological-analysis-made-easy-with-scala</id>
    <content type="html"><![CDATA[<p>Ever since I got involved with distributional semantics, i've been perplexed
about how to handle morphed words, which happens to be just about every noun and
verb in English.  What is a morphed word in English you ask?  It's pretty much
any word that's been changed to reflect things like past tense, plurality,
ownership, and all those things.  They're conjugated verbs and more!  But they
always pose a massive problem in distributional semantics.</p>

<p>Think about it for a second, what's the big difference between "cat" and "cats"?
Not too much, the second is simply saying there are multiple occurrences of a
"cat".  But what do people typically do for distributional semantics?  One of
two bad options: leave the two words as separate things and thus split the
information gained about "cat" across two words or stem every word and throw
away something important like the multitude of "cat".  Both seem totally wrong
and unsatisfactory.</p>

<p>So on and off I've searched for a good tool to do morphological analysis for
English.  Ideally, the analyzer could recognize the word "cats" and split into
two things: <code>cat</code> and <code>&lt;p&gt;</code> that way you can retain all your information about a
<code>cat</code> and still know that there were a multitude of them when you see "cats".
And for verbs?  You should see the same thing, <code>ran</code> could then become something
like <code>run</code> and <code>&lt;past&gt;</code>" so that again, you still know everything about running and that
it happened in the past.  But until today, I've never found a tool that does
this both quickly and easily in a usable language.</p>

<p>That all changes today.  Today I found the <a href="http://wiki.apertium.org/wiki/Lttoolbox-java">Lltool-box for Java</a>.  It creates
a large finite state machine for recognizing morphed words and figuring out the
root word, i.e. "run" in "ran" and "cat" in "cats", and how the word was
morphed, i.e. "run" for "ran" and "cat" for "cats".  All you have to do is get a
listing of how words are morphed, load it up until the <a href="http://wiki.apertium.org/wiki/Lttoolbox-java">Lttoolbox-java</a>
system and analyze away your sentences.</p>

<p>So let's take a spin on how to do this.  First, you read the wiki instructions
for <a href="http://wiki.apertium.org/wiki/Lttoolbox-java">Lttoolbox-java</a>, download it, and compile it.  Compiling is easy:</p>

<p><code>
mvn deploy -DskipTests
</code></p>

<p>The <code>-DskipTests</code> part seems needed since their unit tests don't pass.  But
after that, you can start using the code in your favorite jvm based language.
my personal fave is Scala, so let's run with that.  So what next?  Now you
create a <a href="http://en.wikipedia.org/wiki/Finite_state_transducer">Finite State Transducer</a> using a dictionary file and tell it to
analyze words:</p>

<p>``` scala Setting up the Finite State Transducer https://gist.github.com/1772752 Source Gist</p>

<pre><code>// Create the Finite State Transducer processor.
val fstp = new FSTProcessor()

// Load the finite state transducer with the compiled dictionary file.  
fstp.load(openInFileStream(args(0)))

// Setup the trandsducer to do morphological analysis and make sure it's valid.
fstp.initAnalysis
</code></pre>

<p>```</p>

<p>Now that you have a transducer ready to analyze words, you just feed it stuff like this:</p>

<p>``` scala Loading the transducer with input and output https://gist.github.com/1772752 Source Gist</p>

<pre><code>val in = new StringReader("cats, dogs and blubber all running quickly!")
val out = new StringWriter()
// Do the analysis.
fstp.analysis(in, out)
</code></pre>

<p>```</p>

<p>You gotta create a reader and writer for their transducer interface.  It's
funky, but it still leaves you with a pretty flexible interface.  So now what?
What does the output look like?  If you feed it "cats, dogs and blubber all
running quickly!", the output is pretty ugly at first:</p>

<p>``` html This will never look pretty</p>

<pre><code>^cats/cat&lt;n&gt;&lt;pl&gt;$^,/,&lt;cm&gt;$
^dogs/dog&lt;n&gt;&lt;pl&gt;$
^and/and&lt;cnjcoo&gt;$
^blubber/*blubber$
^all/all&lt;adj&gt;/all&lt;adv&gt;/all&lt;predet&gt;&lt;sp&gt;/all&lt;det&gt;&lt;qnt&gt;&lt;pl&gt;/all&lt;det&gt;&lt;qnt&gt;&lt;sp&gt;/all&lt;prn&gt;&lt;qnt&gt;&lt;mf&gt;&lt;sp&gt;$
^running/run&lt;vblex&gt;&lt;ger&gt;/run&lt;vblex&gt;&lt;pprs&gt;/run&lt;vblex&gt;&lt;subs&gt;/running&lt;adj&gt;/running&lt;n&gt;&lt;sg&gt;$
^quickly/quickly&lt;adv&gt;$
</code></pre>

<p>```</p>

<p>Beastly no? So i figure that it's best to write some regular expressions to
handle all of this.  You'll need a couple: one to split up words, one to match
analysed words, one for unrecognized words, and one to split up the tags.  In
scala you can do this pretty easily like this:</p>

<p>``` scala Regular Expressions for handling output from Lttoolbox-java https://gist.github.com/1772752 Source Gist</p>

<pre><code>// 1: Recognize a fully analyzed word so that they can be tokenized.  In the
// above test case, "cats," will not be separated by white space so we require
// this more complicated splitting method.
val parseRegex = """\^.*?\$""".r
// 2: Recognize a word with morphological tags.
val morphredRegex = """\^(.+?)/(.+?)(&lt;[0-9a-z&lt;&gt;]+&gt;).*\$"""
// 3: Recognize a word that could not be recognized.  The transducer prepends
// &amp;quot;*&amp;quot; to unrecognized tokens, so we match and eliminate it.
val unknownRegex = """\^(.+)/\*(.+?)\$"""
// 4: A regular expression for matching morphological tags.  This is simpler
// than writing a splitting rule.
val featureRegex = """&lt;.*?&gt;"""
</code></pre>

<p>```</p>

<p>Then all you need to do is run through the analyzed sentence and split it up
into separate tokens, some for root words and some for morphed features.  You
can do that like this:</p>

<p>``` scala Parsing that business Lttoolbox-java https://gist.github.com/1772752 Source Gist</p>

<pre><code>val tokens = parseRegex.findAllIn(out.toString).map(parseMatch =&amp;gt; 
// Match the current analyzed word as being morphed or unknown.  For morphed
// words, create a list of the lemma and the tags.  For unknown words just
// create a list of the lemma.
parseMatch.toString match {
    case morphredRegex(surface, lemma, tags) =&amp;gt;
        lemma :: featureRegex.findAllIn(tags).toList
    case unknownRegex(surface, lemma) =&amp;gt;
        List(lemma) 
}).reduceLeft(_++_).filter(!rejectFeatures.contains(_))
</code></pre>

<p>```</p>

<p>This bit of code's pretty sweet.  You first iterate over each analyzed word with
the first matcher.  Then you match each word with the two word level regular
expressions: one for fully analyzed words and one for unrecognized words.  After
that it's easy smeesy, you just split the tags up with the last regular
expression and turn it all into a list.  The last two bits at the end turn the
whole thing into a single list and lets you filter out tags or tokens you don't
want.</p>

<p>So with that, you can now do simple and fast morphological analysis in Java,
Scala, or even Clojure (but who'd do something silly like that?)!-</p>
]]></content>
  </entry>
  
</feed>
